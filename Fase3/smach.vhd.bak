library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity ControlUnit is
	port(reset		: in  std_logic;
		  clk			: in  std_logic;
		  defTempo	: in  std_logic;
		  count		: in  std_logic;
		  falt		: out std_logic;
		  pont		: out std_logic;
		  periodo	: out std_logic;
		  temporizador	: out std_logic);
end ControlUnit;

architecture Behavioral of ControlUnit is

	type TState is (defTime, started, stopped, timeOut);
	signal s_currentState, s_nextState : TState;

begin
	sync_proc : process(clk)
	begin
		if (rising_edge(clk)) then
			if (reset = '1') then
				s_currentState <= defTime;
			else
				s_currentState <= s_nextState;
			end if;
		end if;
	end process;

	comb_proc : process(s_currentState, defTempo, count)
	begin
		case (s_currentState) is
		when defTime =>
			falt <= '0';
			pont <= '0';
			periodo <= '0';
			temporizador <= '0';
			
			if (defTempo = '1' and count = '0') then
				s_nextState <= started;
			else
				s_nextState <= defTime;
			end if;

		when started =>
			falt <= '1';
			pont <= '1';
			periodo <= '1';
			temporizador <= '1';
			
			if (count = '1' and defTempo = '0') then
				s_nextState <= ;
			elsif (statop = '1') then
				s_nextState <= STOPPED;
			else
				s_nextState <= STARTED;
			end if;

		when STOPPED =>
			cntRst <= '0';
			cntEnb <= '0';
			regEnb <= '1';
			if (statop = '1') then
				s_nextState <= STARTED;
			elsif (laprst = '1') then
				s_nextState <= CLEARED;
			else
				s_nextState <= STOPPED;
			end if;

		when LAPVIEW =>
			cntRst <= '0';
			cntEnb <= '1';
			regEnb <= '0';
			if (laprst = '1') then
				s_nextState <= STARTED;
			else
				s_nextState <= LAPVIEW;
			end if;
		end case;

	end process;

end Behavioral;