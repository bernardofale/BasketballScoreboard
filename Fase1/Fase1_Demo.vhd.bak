library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Fase1 is
	port( CLOCK_50 : in 	std_logic;			KEY		: in 	std_logic_vector(0 downto 0);
			LEDR		: out std_logic_vector(3 downto 0);
			HEX0		: out std_logic_vector(6 downto 0);
			HEX1		: out std_logic_vector(6 downto 0);
			HEX2		: out std_logic_vector(6 downto 0);
			HEX3		: out std_logic_vector(6 downto 0););
end Fase1;

architecture Shell of Fase1 is
	signal s_count: std_logic_vector(15 downto 0);
	signal s_clock: std_logic;
begin
	counterDown: 	entity work.CounterDown(behav)
						port map(clk => s_clock, --freqdivider
									enable => not KEY(0), -- METER DEBOUNCER
									dataIn => "0001000000000000",
									count => s_count);
	
	clkDivider:		entity work.ClkDividerN(Behavioral)
						generic map (divFactor => 50000000);
						port map( clkIn => CLOCK_50,
									 clkOut => s_clock);
	
	DIG1:				entity work.Bin7SegDecoder(Behavioral)
						port map( enable => '1',
									 binInput => s_count(15 downto 12)
									 decOut_n => HEX3(6 downto 0));
	
	DIG2:				entity work.Bin7SegDecoder(Behavioral)
						port map( enable => '1',
									 binInput => s_count(11 downto 8)
									 decOut_n => HEX2(6 downto 0));
									 
	DIG3:				entity work.Bin7SegDecoder(Behavioral)
						port map( enable => '1',
									 binInput => s_count(7 downto 4)
									 decOut_n => HEX1(6 downto 0));
									 
	DIG4:				entity work.Bin7SegDecoder(Behavioral)
						port map( enable => '1',
									 binInput => s_count(3 downto 0)
									 decOut_n => HEX0(6 downto 0));
end Shell;